@model DeliveryApp.Models.ViewModels.DashboardViewModel
@{
    ViewData["Title"] = "Dashboard";
    ViewBag.CurrentAction = "Index";
    ViewBag.CurrentController = "Dashboard";
    ViewBag.CurrentViewTitle = "Dashboard";
}

<div class="row">
    <div class="col-lg-3 col-md-6 col-sm-6">
        <div class="card card-stats">
            <div class="card-body ">
                <div class="row">
                    <div class="col-5 col-md-4">
                        <div class="icon-big text-center icon-warning">
                            <i class="nc-icon nc-badge text-warning"></i>
                        </div>
                    </div>
                    <div class="col-7 col-md-8">
                        <div class="numbers">
                            <p class="card-category">Nouveaux livreurs</p>
                            <p class="card-title">@Model.NbNewDeliveryMen<p>
                        </div>
                    </div>
                </div>
            </div>
            @if (Model.NbNewDeliveryMen > 0)
            {
                <div class="card-footer ">
                    <hr>
                    <div class="stats">
                        <i style="font-size: 20px" class="nc-icon text-warning nc-alert-circle-i"></i>
                        <a asp-action="NotValidatedDeliveryMen" asp-controller="DeliveryMan" class="text-warning"><strong>Gérer</strong></a>
                    </div>
                </div>
            }
        </div>
    </div>
    <div class="col-lg-3 col-md-6 col-sm-6">
        <div class="card card-stats">
            <div class="card-body ">
                <div class="row">
                    <div class="col-5 col-md-4">
                        <div class="icon-big text-center icon-warning">
                            <i class="nc-icon nc-circle-10 text-success"></i>
                        </div>
                    </div>
                    <div class="col-7 col-md-8">
                        <div class="numbers">
                            <p class="card-category">Clients</p>
                            <p class="card-category">Inscrits</p>
                            <p class="card-title">@Model.NbClients<p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-md-6 col-sm-6">
        <div class="card card-stats">
            <div class="card-body ">
                <div class="row">
                    <div class="col-5 col-md-4">
                        <div class="icon-big text-center icon-warning">
                            <i class="nc-icon nc-basket text-danger"></i>
                        </div>
                    </div>
                    <div class="col-7 col-md-8">
                        <div class="numbers">
                            <p class="card-category">Commandes en attente</p>
                            <p class="card-title">@Model.NbPendingOrders<p>
                        </div>
                    </div>
                </div>
            </div>
            @if (Model.NbPendingOrders > 0)
            {
                <div class="card-footer ">
                    <hr>
                    <div class="stats">
                        <i style="font-size: 20px" class="nc-icon text-warning nc-alert-circle-i"></i>
                        <a asp-action="PendingOrders" asp-controller="Order" class="text-warning"><strong>Gérer</strong></a>
                    </div>
                </div>
            }
        </div>
    </div>
    <div class="col-lg-3 col-md-6 col-sm-6">
        <div class="card card-stats">
            <div class="card-body ">
                <div class="row">
                    <div class="col-5 col-md-4">
                        <div class="icon-big text-center icon-warning">
                            <i class="nc-icon nc-delivery-fast text-primary"></i>
                        </div>
                    </div>
                    <div class="col-7 col-md-8">
                        <div class="numbers">
                            <p class="card-category">Commandes livrées</p>
                            <p class="card-title">@Model.DeliveredOrders.Count()<p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row ml-1">
        <div class="col-md-5">
            <div class="card ">
                <div class="card-header ">
                    <h5 class="card-title">Livraisons par livreur</h5>
                    <p class="card-category">Nombre de livraisons effectuées pour chaque livreur</p>
                </div>
                <div class="card-body ">
                    <canvas id="chartNbOrders" class="ct-chart ct-perfect-fourth" height="300"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-7">
            <div class="card card-chart">
                <div class="card-header">
                    <h5 class="card-title">Note moyenne par livreur</h5>
                    <p class="card-category">Note moyenne attribuée pour chaque livreur</p>
                </div>
                <div class="card-body">
                    <canvas id="chartRating"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script>

        var deliveryMenNamesArray = new Array();
        var nbOrdersArray = new Array();

        var namesArray = new Array();
        var ratingsArray = new Array();

        var colorsArray = new Array();

        @foreach(var man in Model.DeliveredOrdersPerDeliveryMan)
        {
            <text>
                deliveryMenNamesArray.push("@man.FirstName @man.LastName");
                nbOrdersArray.push(@man.NbDeliveredOrders)
                colorsArray.push('#' + fullColorHex(randomNumber(), randomNumber(), randomNumber()));
            </text>
        }

        @foreach(var man in Model.RatedDeliveryMen)
        {
            <text>
                namesArray.push("@man.FirstName @man.LastName");
                ratingsArray.push(parseFloat(@man.RatingOverall))
            </text>
        }



        chartColor = "#FFFFFF";
        ctx = document.getElementById('chartNbOrders').getContext("2d");

        myChart = new Chart(ctx, {
            type: 'pie',
            data: {
                labels: deliveryMenNamesArray,
                datasets: [{
                    label: "Livraisons",
                    pointRadius: 0,
                    pointHoverRadius: 0,
                    backgroundColor: 
                        colorsArray
                    ,
                    borderWidth: 2,
                    data: nbOrdersArray
                }]
            },
            options: {

                legend: {
                    display: true
                },
                tooltips: {
                    enabled: true
                },

                scales: {
                    yAxes: [{

                        ticks: {
                            display: false
                        },
                        gridLines: {
                            drawBorder: false,
                            zeroLineColor: "transparent",
                            color: 'rgba(255,255,255,0.05)'
                        }

                    }],

                    xAxes: [{
                        barPercentage: 1.6,
                        gridLines: {
                            drawBorder: true,
                            color: 'rgba(255,255,255,0.1)',
                            zeroLineColor: "transparent"
                        },
                        ticks: {
                            display: false,
                        }
                    }]
                },
            }
        });

        ctx = document.getElementById('chartRating').getContext("2d");

        gradientStroke = ctx.createLinearGradient(500, 0, 100, 0);
        gradientStroke.addColorStop(0, '#80b6f4');
        gradientStroke.addColorStop(1, chartColor);

        gradientFill = ctx.createLinearGradient(0, 170, 0, 50);
        gradientFill.addColorStop(0, "rgba(128, 182, 244, 0)");
        gradientFill.addColorStop(1, "rgba(249, 99, 59, 0.40)");

        myChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: namesArray,
                datasets: [

                    {
                        label: "Data",
                        borderColor: '#fcc468',
                        fill: true,
                        backgroundColor: '#fcc468',
                        hoverBorderColor: '#fcc468',
                        borderWidth: 5,
                        data: ratingsArray,
                    }
                ]
            },
            options: {

                tooltips: {
                    tooltipFillColor: "rgba(0,0,0,0.5)",
                    tooltipFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                    tooltipFontSize: 14,
                    tooltipFontStyle: "normal",
                    tooltipFontColor: "#fff",
                    tooltipTitleFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                    tooltipTitleFontSize: 14,
                    tooltipTitleFontStyle: "bold",
                    tooltipTitleFontColor: "#fff",
                    tooltipYPadding: 6,
                    tooltipXPadding: 6,
                    tooltipCaretSize: 8,
                    tooltipCornerRadius: 6,
                    tooltipXOffset: 10,
                },


                legend: {

                    display: false
                },
                scales: {

                    yAxes: [{
                        ticks: {
                            fontColor: "#9f9f9f",
                            fontStyle: "bold",
                            beginAtZero: true,
                            maxTicksLimit: 5,
                            padding: 20
                        },
                        gridLines: {
                            zeroLineColor: "transparent",
                            display: true,
                            drawBorder: false,
                            color: '#9f9f9f',
                        }

                    }],
                    xAxes: [{
                        barPercentage: 0.4,
                        gridLines: {
                            zeroLineColor: "white",
                            display: false,

                            drawBorder: false,
                            color: 'transparent',
                        },
                        ticks: {
                            padding: 20,
                            fontColor: "#9f9f9f",
                            fontStyle: "bold"
                        }
                    }]
                }
            }
        });

        function rgbToHex(rgb) {
            var hex = Number(rgb).toString(16);
            if (hex.length < 2) {
                hex = "0" + hex;
            }
            return hex;
        }

        function fullColorHex(r, g, b) {
            
             var red = rgbToHex(r);
             var green = rgbToHex(g);
             var blue = rgbToHex(b);

            return red + green + blue;
        }

        function randomNumber() {
            var number = Math.floor(Math.random() * 256);
            return number;
        }
        
    </script>
}